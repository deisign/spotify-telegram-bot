# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def extended_callback_query(call):
    if call.from_user.id != admin_id:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
    if call.data.startswith("del_"):
        queue_id = int(call.data.replace("del_", ""))
        remove_from_queue(queue_id)
        bot.answer_callback_query(call.id, "–ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        queue_items = get_queue()
        if queue_items:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é
            try:
                bot.edit_message_text("–ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /manage –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.", 
                                     chat_id=call.message.chat.id, 
                                     message_id=call.message.message_id)
            except:
                pass
            notify_admin_about_queue(queue_items)
        else:
            bot.edit_message_text("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞", 
                                 chat_id=call.message.chat.id, 
                                 message_id=call.message.message_id)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ–π –æ—á–µ—Ä–µ–¥–∏
    elif call.data == "clear_all":
        clear_queue()
        bot.answer_callback_query(call.id, "–û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞")
        bot.edit_message_text("–û—á–µ—Ä–µ–¥—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞", 
                             chat_id=call.message.chat.id, 
                             message_id=call.message.message_id)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤–≤–µ—Ä—Ö
    elif call.data.startswith("up_"):
        queue_id = int(call.data.replace("up_", ""))
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å
        queue_items = get_queue()
        
        # –ò—â–µ–º –ø–æ–∑–∏—Ü–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥–∏
        item_position = None
        for i, item in enumerate(queue_items):
            if item[0] == queue_id:
                item_position = i
                break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º
        if item_position is not None and item_position > 0:
            # –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏ —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–µ–¥ –Ω–∏–º
            current_item = queue_items[item_position]
            prev_item = queue_items[item_position - 1]
            
            # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            conn = sqlite3.connect('bot_data.db', check_same_thread=False)
            c = conn.cursor()
            c.execute("UPDATE queue SET post_time = ? WHERE id = ?", (prev_item[7], current_item[0]))
            c.execute("UPDATE queue SET post_time = ? WHERE id = ?", (current_item[7], prev_item[0]))
            conn.commit()
            conn.close()
            
            bot.answer_callback_query(call.id, "–†–µ–ª–∏–∑ –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤–≤–µ—Ä—Ö –≤ –æ—á–µ—Ä–µ–¥–∏")
        else:
            bot.answer_callback_query(call.id, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å: —ç–ª–µ–º–µ–Ω—Ç —É–∂–µ –ø–µ—Ä–≤—ã–π –≤ –æ—á–µ—Ä–µ–¥–∏ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        bot.edit_message_text("–û—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /manage –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.", 
                             chat_id=call.message.chat.id, 
                             message_id=call.message.message_id)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤–Ω–∏–∑
    elif call.data.startswith("down_"):
        queue_id = int(call.data.replace("down_", ""))
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å
        queue_items = get_queue()
        
        # –ò—â–µ–º –ø–æ–∑–∏—Ü–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥–∏
        item_position = None
        for i, item in enumerate(queue_items):
            if item[0] == queue_id:
                item_position = i
                break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º
        if item_position is not None and item_position < len(queue_items) - 1:
            # –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏ —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ –Ω–µ–≥–æ
            current_item = queue_items[item_position]
            next_item = queue_items[item_position + 1]
            
            # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            conn = sqlite3.connect('bot_data.db', check_same_thread=False)
            c = conn.cursor()
            c.execute("UPDATE queue SET post_time = ? WHERE id = ?", (next_item[7], current_item[0]))
            c.execute("UPDATE queue SET post_time = ? WHERE id = ?", (current_item[7], next_item[0]))
            conn.commit()
            conn.close()
            
            bot.answer_callback_query(call.id, "–†–µ–ª–∏–∑ –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤–Ω–∏–∑ –≤ –æ—á–µ—Ä–µ–¥–∏")
        else:
            bot.answer_callback_query(call.id, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å: —ç–ª–µ–º–µ–Ω—Ç —É–∂–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        bot.edit_message_text("–û—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /manage –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.", 
                             chat_id=call.message.chat.id, 
                             message_id=call.message.message_id)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–ª–∏–∑–µ
    elif call.data.startswith("info_"):
        queue_id = int(call.data.replace("info_", ""))
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ª–∏–∑–µ
        conn = sqlite3.connect('bot_data.db', check_same_thread=False)
        c = conn.cursor()
        c.execute("SELECT * FROM queue WHERE id = ?", (queue_id,))
        item = c.fetchone()
        conn.close()
        
        if item:
            _, spotify_id, artist, title, image_url, spotify_link, _, post_time = item
            post_datetime = datetime.fromisoformat(post_time)
            formatted_time = post_datetime.strftime('%H:%M, %d.%m')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–ª–∏–∑–µ
            info_text = f"üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–ª–∏–∑–µ –≤ –æ—á–µ—Ä–µ–¥–∏:</b>\n\n"
            info_text += f"<b>ID:</b> {queue_id}\n"
            info_text += f"<b>–ê—Ä—Ç–∏—Å—Ç:</b> {artist}\n"
            info_text += f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n"
            info_text += f"<b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞:</b> {formatted_time}\n"
            info_text += f"<b>Spotify ID:</b> {spotify_id}\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", callback_data="back_to_manage"))
            markup.add(types.InlineKeyboardButton("üîÑ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data=f"publish_now_{queue_id}"))
            
            bot.edit_message_text(info_text, 
                                 chat_id=call.message.chat.id, 
                                 message_id=call.message.message_id,
                                 reply_markup=markup,
                                 parse_mode='HTML')
        else:
            bot.answer_callback_query(call.id, "–†–µ–ª–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏")
    
    # –í–æ–∑–≤—Ä–∞—Ç –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    elif call.data == "back_to_manage":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        extended_queue_manage(call.message)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        except:
            pass
    
    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–ª–∏–∑–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
    elif call.data.startswith("publish_now_"):
        queue_id = int(call.data.replace("publish_now_", ""))
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–ª–∏–∑–∞
        conn = sqlite3.connect('bot_data.db', check_same_thread=False)
        c = conn.cursor()
        c.execute("SELECT * FROM queue WHERE id = ?", (queue_id,))
        item = c.fetchone()
        conn.close()
        
        if item:
            bot.answer_callback_query(call.id, "–†–µ–ª–∏–∑ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ")
            bot.edit_message_text("–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–ª–∏–∑–∞...", 
                                 chat_id=call.message.chat.id, 
                                 message_id=call.message.message_id)
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Ä–µ–ª–∏–∑
            try:
                post_to_channel(item)
                bot.edit_message_text("–†–µ–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!", 
                                     chat_id=call.message.chat.id, 
                                     message_id=call.message.message_id)
            except Exception as e:
                bot.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ–ª–∏–∑–∞: {str(e)}", 
                                     chat_id=call.message.chat.id, 
                                     message_id=call.message.message_id)
        else:
            bot.answer_callback_query(call.id, "–†–µ–ª–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    elif call.data.startswith("time_"):
        queue_id = int(call.data.replace("time_", ""))
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–ª–∏–∑–∞
        conn = sqlite3.connect('bot_data.db', check_same_thread=False)
        c = conn.cursor()
        c.execute("SELECT * FROM queue WHERE id = ?", (queue_id,))
        item = c.fetchone()
        conn.close()
        
        if item:
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
            bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
                                 "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.05.2025 14:30", 
                                 chat_id=call.message.chat.id, 
                                 message_id=call.message.message_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ä–µ–ª–∏–∑–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
            bot.register_next_step_handler(call.message, process_new_time, queue_id)
        else:
            bot.answer_callback_query(call.id, "–†–µ–ª–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
def process_new_time(message, queue_id):
    try:
        # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        new_time = datetime.strptime(message.text, '%d.%m.%Y %H:%M')
        
        # –õ–æ–∫–∞–ª–∏–∑—É–µ–º –≤—Ä–µ–º—è
        moscow_tz = pytz.timezone('Europe/Moscow')
        new_time = moscow_tz.localize(new_time)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –ë–î
        conn = sqlite3.connect('bot_data.db', check_same_thread=False)
        c = conn.cursor()
        c.execute("UPDATE queue SET post_time = ? WHERE id = ?", (new_time.isoformat(), queue_id))
        conn.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ª–∏–∑–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        c.execute("SELECT artist, title FROM queue WHERE id = ?", (queue_id,))
        result = c.fetchone()
        conn.close()
        
        if result:
            artist, title = result
            bot.send_message(message.chat.id, f"–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ–ª–∏–∑–∞ '{artist} - {title}' –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_time.strftime('%d.%m.%Y %H:%M')}")
        else:
            bot.send_message(message.chat.id, "–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥—å
        queue_items = get_queue()
        notify_admin_about_queue(queue_items)
    
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {str(e)}")

# –ö–æ–º–∞–Ω–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏
@bot.message_handler(commands=['queue_manage'])
def manage_queue(message):
    logger.debug(f"–ö–æ–º–∞–Ω–¥–∞ /queue_manage –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    if message.from_user.id != admin_id:
        bot.send_message(message.chat.id, f"–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ. –í–∞—à ID: {message.from_user.id}, –∞ –Ω—É–∂–µ–Ω: {admin_id}")
        return
    
    queue_items = get_queue()
    if not queue_items:
        bot.send_message(admin_id, "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞")
        return
    
    markup = types.InlineKeyboardMarkup()
    
    for item in queue_items[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        queue_id, _, artist, title, _, _, _, _ = item
        button_text = f"{queue_id}. {artist[:15]}... - {title[:15]}..."
        callback_data = f"del_{queue_id}"
        markup.add(types.InlineKeyboardButton(text=button_text, callback_data=callback_data))
    
    markup.add(types.InlineKeyboardButton(text="‚ùå –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –æ—á–µ—Ä–µ–¥—å", callback_data="clear_all"))
    
    bot.send_message(admin_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)

# –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤
@bot.message_handler(commands=['check'])
def check_updates_command(message):
    logger.debug(f"–ö–æ–º–∞–Ω–¥–∞ /check –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    if message.from_user.id != admin_id:
        bot.send_message(message.chat.id, f"–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ. –í–∞—à ID: {message.from_user.id}, –∞ –Ω—É–∂–µ–Ω: {admin_id}")
        return
        
    check_message = bot.send_message(message.chat.id, "–ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—ã–µ —Ä–µ–ª–∏–∑—ã –æ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
    def check_and_update():
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            check_followed_artists_releases()
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥—å
            queue_items = get_queue()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if queue_items:
                bot.edit_message_text(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ {len(queue_items)} —Ä–µ–ª–∏–∑–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏.", 
                                      message.chat.id, check_message.message_id)
                notify_admin_about_queue(queue_items)
            else:
                bot.edit_message_text("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", 
                                     message.chat.id, check_message.message_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            bot.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–ª–∏–∑–æ–≤. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö.", 
                                 message.chat.id, check_message.message_id)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    check_thread = threading.Thread(target=check_and_update)
    check_thread.daemon = True
    check_thread.start()

# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑–∞ –æ—á–µ—Ä–µ–¥–∏
@bot.message_handler(commands=['queue'])
def show_queue(message):
    logger.debug(f"–ö–æ–º–∞–Ω–¥–∞ /queue –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    if message.from_user.id == admin_id:
        queue_items = get_queue()
        notify_admin_about_queue(queue_items)
    else:
        bot.send_message(message.chat.id, f"–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ. –í–∞—à ID: {message.from_user.id}, –∞ –Ω—É–∂–µ–Ω: {admin_id}")

if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –û—á–∏—â–∞–µ–º webhook –µ—Å–ª–∏ –æ–Ω –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    try:
        bot.remove_webhook()
        logger.info("Webhook —É–¥–∞–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
    try:
        bot.delete_webhook()
        logger.info("Webhook —É–¥–∞–ª–µ–Ω (–º–µ—Ç–æ–¥ delete_webhook)")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –º–µ—Ç–æ–¥–æ–º: {e}")
    
    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
    def run_background_tasks():
        last_check_time = time.time()
        last_queue_check = time.time()
        last_token_refresh = time.time()
        
        while True:
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∂–¥—ã–π —á–∞—Å
                if time.time() - last_token_refresh > 60 * 60:
                    logger.info("–û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω Spotify...")
                    try:
                        token_info = sp_oauth.refresh_access_token(spotify_refresh_token)
                        global sp
                        sp = spotipy.Spotify(auth=token_info['access_token'])
                        logger.info("–¢–æ–∫–µ–Ω Spotify —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
                    last_token_refresh = time.time()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ä–µ–ª–∏–∑—ã –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞
                if time.time() - last_check_time > 3 * 60 * 60:
                    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤...")
                    check_followed_artists_releases()
                    last_check_time = time.time()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                if time.time() - last_queue_check > 60:
                    logger.debug("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–∏...")
                    check_and_post_from_queue()
                    last_queue_check = time.time()
                
                time.sleep(1)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á–∞—Ö: {e}")
                logger.error(traceback.format_exc())
                time.sleep(5)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    background_thread = threading.Thread(target=run_background_tasks, daemon=True)
    background_thread.start()
    
    # –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    logger.info("–ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–∏—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–ª–∏–∑–æ–≤...")
    
    # –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
    check_thread = threading.Thread(target=check_followed_artists_releases, daemon=True)
    check_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º polling
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è Telegram API
    while True:
        try:
            # –≠—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å polling —Å –Ω–æ–≤—ã–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
            bot.stop_polling()
            time.sleep(1)
            bot.polling(none_stop=True, interval=3, timeout=30)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ polling: {e}")
            logger.error(traceback.format_exc())
            time.sleep(10)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—É –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
