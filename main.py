# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é
@bot.message_handler(commands=['manage'])
def extended_queue_manage(message):
    if message.from_user.id != admin_id:
        bot.send_message(message.chat.id, f"–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ. –í–∞—à ID: {message.from_user.id}, –∞ –Ω—É–∂–µ–Ω: {admin_id}")
        return
    
    queue_items = get_queue()
    if not queue_items:
        bot.send_message(admin_id, "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞")
        return
        
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    markup = types.InlineKeyboardMarkup(row_width=2)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–ª–∏–∑–∞ –≤ –æ—á–µ—Ä–µ–¥–∏
    for item in queue_items[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        queue_id, _, artist, title, _, _, _, post_time = item
        post_datetime = datetime.fromisoformat(post_time)
        formatted_time = post_datetime.strftime('%H:%M, %d.%m')
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–ª–∏–∑–µ
        button_text = f"üéµ {artist} - {title} ({formatted_time})"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–ª–∏–∑–∞
        markup.add(
            types.InlineKeyboardButton(button_text, callback_data=f"info_{queue_id}")
        )
        markup.add(
            types.InlineKeyboardButton("‚¨ÜÔ∏è –í–≤–µ—Ä—Ö", callback_data=f"up_{queue_id}"),
            types.InlineKeyboardButton("‚¨áÔ∏è –í–Ω–∏–∑", callback_data=f"down_{queue_id}")
        )
        markup.add(
            types.InlineKeyboardButton("‚è± –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data=f"time_{queue_id}"),
            types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"del_{queue_id}")
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ–π –æ—á–µ—Ä–µ–¥–∏ –≤–Ω–∏–∑—É
    markup.add(types.InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –æ—á–µ—Ä–µ–¥—å", callback_data="clear_all"))
    
    bot.send_message(admin_id, "üìã <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—å—é –ø–æ—Å—Ç–æ–≤:</b>", reply_markup=markup, parse_mode='HTML')# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ Spotify
@bot.message_handler(func=lambda message: 
                    message.text and ('open.spotify.com/album/' in message.text or 'open.spotify.com/track/' in message.text))
def spotify_link_handler(message):
    if message.from_user.id != admin_id:
        bot.send_message(message.chat.id, "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Ä–µ–ª–∏–∑—ã –≤ –æ—á–µ—Ä–µ–¥—å.")
        return
    
    # –ù–∞—Ö–æ–¥–∏–º —Å—Å—ã–ª–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    words = message.text.split()
    spotify_link = None
    for word in words:
        if 'open.spotify.com/album/' in word or 'open.spotify.com/track/' in word:
            spotify_link = word
            break
    
    if not spotify_link:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Spotify.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = bot.send_message(message.chat.id, "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Å—ã–ª–∫—É –Ω–∞ Spotify...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ª–∏–∑ –≤ –æ—á–µ—Ä–µ–¥—å
    success, result = add_release_by_link(spotify_link)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    bot.edit_message_text(result, chat_id=message.chat.id, message_id=processing_msg.message_id)
    
    # –ï—Å–ª–∏ —Ä–µ–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥—å
    if success:
        queue_items = get_queue()
        notify_admin_about_queue(queue_items)# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–ª–∏–∑–∞ –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ —Å—Å—ã–ª–∫–µ
def add_release_by_link(spotify_link, scheduled_time=None):
    try:
        # –ò–∑ —Å—Å—ã–ª–∫–∏ –≤—ã–¥–µ–ª—è–µ–º ID –∞–ª—å–±–æ–º–∞/—Ç—Ä–µ–∫–∞
        if 'spotify.com/album/' in spotify_link:
            # –§–æ—Ä–º–∞—Ç: https://open.spotify.com/album/1234567890
            album_id = spotify_link.split('spotify.com/album/')[1].split('?')[0]
        elif 'spotify.com/track/' in spotify_link:
            # –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç—Ä–µ–∫, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –∞–ª—å–±–æ–º
            track_id = spotify_link.split('spotify.com/track/')[1].split('?')[0]
            track = sp.track(track_id)
            album_id = track['album']['id']
        else:
            return False, "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞–ª—å–±–æ–º—ã –∏ —Ç—Ä–µ–∫–∏."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ä–µ–ª–∏–∑ –≤ –æ—á–µ—Ä–µ–¥—å
        current_queue = get_queue()
        queue_spotify_ids = [item[1] for item in current_queue]
        
        if album_id in queue_spotify_ids:
            return False, "–≠—Ç–æ—Ç —Ä–µ–ª–∏–∑ —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —ç—Ç–æ—Ç —Ä–µ–ª–∏–∑
        if is_release_posted(album_id):
            return False, "–≠—Ç–æ—Ç —Ä–µ–ª–∏–∑ —É–∂–µ –±—ã–ª –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —Ä–∞–Ω–µ–µ."
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–ª—å–±–æ–º–µ
        album = sp.album(album_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—á–µ—Ä–µ–¥–∏
        artist_name = album['artists'][0]['name']
        album_title = album['name']
        image_url = album['images'][0]['url'] if album['images'] else None
        spotify_link = album['external_urls']['spotify']
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç—Ä–µ–∫ –∞–ª—å–±–æ–º–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        album_tracks = sp.album_tracks(album_id, limit=1)
        if album_tracks['items']:
            track = album_tracks['items'][0]
            query = f"{track['name']} - {artist_name}"
        else:
            query = f"{album_title} - {artist_name}"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        moscow_tz = pytz.timezone('Europe/Moscow')
        if scheduled_time:
            post_time = scheduled_time
        else:
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ, —Å—Ç–∞–≤–∏–º –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π —á–∞—Å
            post_time = datetime.now(moscow_tz) + timedelta(hours=1)
            post_time = post_time.replace(minute=0, second=0, microsecond=0)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
        add_to_queue(
            album_id,
            artist_name,
            album_title,
            image_url,
            spotify_link,
            query,
            post_time.isoformat()
        )
        
        return True, f"–†–µ–ª–∏–∑ {artist_name} - {album_title} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ {post_time.strftime('%H:%M, %d.%m')}"
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–ª–∏–∑–∞ –ø–æ —Å—Å—ã–ª–∫–µ: {e}")
        logger.error(traceback.format_exc())
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–ª–∏–∑–∞: {str(e)}"import os
import telebot
from telebot import types
import requests
import spotipy
from spotipy.oauth2 import SpotifyOAuth
from datetime import datetime, timedelta
import pytz
import time
import logging
import sqlite3
import sys
import traceback
import threading
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
handler = logging.StreamHandler(sys.stdout)
handler.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('bot_data.db', check_same_thread=False)
    c = conn.cursor()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å—Ç–∞ —Ä–µ–ª–∏–∑–æ–≤
    c.execute('''CREATE TABLE IF NOT EXISTS posted_releases
                 (spotify_id TEXT PRIMARY KEY, post_date TEXT)''')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—á–µ—Ä–µ–¥–∏
    c.execute('''CREATE TABLE IF NOT EXISTS queue
                 (id INTEGER PRIMARY KEY AUTOINCREMENT, 
                  spotify_id TEXT,
                  artist TEXT,
                  title TEXT,
                  image_url TEXT,
                  spotify_link TEXT,
                  query TEXT,
                  post_time TEXT,
                  UNIQUE(spotify_id))''')
    
    conn.commit()
    conn.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ —Ä–µ–ª–∏–∑ —É–∂–µ –∑–∞–ø–æ—â–µ–Ω
def is_release_posted(spotify_id):
    conn = sqlite3.connect('bot_data.db', check_same_thread=False)
    c = conn.cursor()
    c.execute("SELECT * FROM posted_releases WHERE spotify_id = ?", (spotify_id,))
    result = c.fetchone()
    conn.close()
    return result is not None

# –û—Ç–º–µ—Ç–∏—Ç—å —Ä–µ–ª–∏–∑ –∫–∞–∫ –∑–∞–ø–æ—â–µ–Ω–Ω—ã–π
def mark_release_posted(spotify_id):
    conn = sqlite3.connect('bot_data.db', check_same_thread=False)
    c = conn.cursor()
    c.execute("INSERT OR REPLACE INTO posted_releases (spotify_id, post_date) VALUES (?, ?)", 
              (spotify_id, datetime.now().isoformat()))
    conn.commit()
    conn.close()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
def add_to_queue(spotify_id, artist, title, image_url, spotify_link, query, post_time):
    conn = sqlite3.connect('bot_data.db', check_same_thread=False)
    c = conn.cursor()
    try:
        c.execute('''INSERT OR IGNORE INTO queue 
                     (spotify_id, artist, title, image_url, spotify_link, query, post_time) 
                     VALUES (?, ?, ?, ?, ?, ?, ?)''',
                  (spotify_id, artist, title, image_url, spotify_link, query, post_time))
        conn.commit()
    except sqlite3.IntegrityError:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        pass
    conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
def get_queue():
    conn = sqlite3.connect('bot_data.db', check_same_thread=False)
    c = conn.cursor()
    c.execute("SELECT * FROM queue ORDER BY post_time ASC")
    queue = c.fetchall()
    conn.close()
    return queue

# –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
def remove_from_queue(queue_id):
    conn = sqlite3.connect('bot_data.db', check_same_thread=False)
    c = conn.cursor()
    c.execute("DELETE FROM queue WHERE id = ?", (queue_id,))
    conn.commit()
    conn.close()

# –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏
def clear_queue():
    conn = sqlite3.connect('bot_data.db', check_same_thread=False)
    c = conn.cursor()
    c.execute("DELETE FROM queue")
    conn.commit()
    conn.close()

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –±–æ—Ç–∞
bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
spotify_client_id = os.getenv('SPOTIFY_CLIENT_ID')
spotify_client_secret = os.getenv('SPOTIFY_CLIENT_SECRET')
spotify_refresh_token = os.getenv('SPOTIFY_REFRESH_TOKEN')  # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π refresh_token
admin_id = int(os.getenv('TELEGRAM_ADMIN_ID', '7213866'))  # –ü–æ–ª—É—á–∞–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
channel_id = os.getenv('TELEGRAM_CHANNEL_ID')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Spotify –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ OAuth —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º refresh token
try:
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç OAuth
    sp_oauth = SpotifyOAuth(
        client_id=spotify_client_id,
        client_secret=spotify_client_secret,
        redirect_uri="http://localhost:8888/callback",  # –õ—é–±–æ–π URI, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ refreshing
        scope="user-follow-read user-library-read",
        open_browser=False
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞–ø—Ä—è–º—É—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º refresh token
    token_info = sp_oauth.refresh_access_token(spotify_refresh_token)
    access_token = token_info['access_token']
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Spotify —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
    sp = spotipy.Spotify(auth=access_token)
    logger.info("Spotify –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç
    current_user = sp.current_user()
    logger.info(f"–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {current_user['display_name']} (ID: {current_user['id']})")
    
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Spotify: {e}")
    logger.error(traceback.format_exc())
    sp = None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ - –æ—Ç–∫–ª—é—á–∞–µ–º –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º–∏
bot = telebot.TeleBot(bot_token, parse_mode='HTML', threaded=False)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
init_db()

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤ –æ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
def check_followed_artists_releases():
    try:
        if not sp:
            logger.error("Spotify –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É")
            return
        
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤ –æ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π")
        moscow_tz = pytz.timezone('Europe/Moscow')
        current_time = datetime.now(moscow_tz)
        
        # –¢–æ—á–Ω–æ 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–∫–Ω–æ –ø–æ–∏—Å–∫–∞, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å —Ä–µ–ª–∏–∑—ã
        days_ago = 7
        cutoff_date = current_time - timedelta(days=days_ago)
        cutoff_date_str = cutoff_date.strftime('%Y-%m-%d')
        
        logger.info(f"–ü–æ–∏—Å–∫ —Ä–µ–ª–∏–∑–æ–≤ —Å {cutoff_date_str} –ø–æ {current_time.strftime('%Y-%m-%d')}")
        logger.info(f"–¢–µ–∫—É—â–∏–π –≥–æ–¥: {current_time.year}")
        
        new_releases = []
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å - –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        current_queue = get_queue()
        queue_spotify_ids = [item[1] for item in current_queue]  # ID —Ä–µ–ª–∏–∑–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–¥–ø–∏—Å–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        try:
            followed_artists = []
            results = sp.current_user_followed_artists(limit=50)
            
            while results:
                for item in results['artists']['items']:
                    followed_artists.append(item)
                
                if results['artists']['next']:
                    results = sp.next(results['artists'])
                else:
                    results = None
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(followed_artists)} –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ä–µ–ª–∏–∑—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            artist_count = 0
            for artist in followed_artists:
                artist_count += 1
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 200 –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ä–µ—Å—É—Ä—Å–æ–≤
                if artist_count > 200:
                    logger.info(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 200 –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö")
                    break
                    
                artist_id = artist['id']
                artist_name = artist['name']
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∞–ª—å–±–æ–º—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–¥–∞–≤–Ω–∏–º–∏ (10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö)
                    albums = sp.artist_albums(artist_id, album_type='album,single', limit=10)
                    
                    for album in albums['items']:
                        release_date_str = album.get('release_date', '')
                        album_id = album.get('id', '')
                        
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ ID –∞–ª—å–±–æ–º–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                        if not album_id:
                            continue
                            
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —Ä–µ–ª–∏–∑ —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏
                        if album_id in queue_spotify_ids:
                            logger.debug(f"–†–µ–ª–∏–∑ {artist_name} - {album['name']} —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                            continue
                        
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —Ä–µ–ª–∏–∑ —É–∂–µ –±—ã–ª –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω
                        if is_release_posted(album_id):
                            logger.debug(f"–†–µ–ª–∏–∑ {artist_name} - {album['name']} —É–∂–µ –±—ã–ª –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                            continue
                        
                        if not release_date_str:
                            continue
                        
                        try:
                            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Ä–µ–ª–∏–∑–∞
                            if len(release_date_str) == 4:  # –¢–æ–ª—å–∫–æ –≥–æ–¥ (YYYY)
                                year = int(release_date_str)
                                if year < current_time.year - 1:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–ª–∏–∑—ã —Å—Ç–∞—Ä—à–µ –ø—Ä–æ—à–ª–æ–≥–æ –≥–æ–¥–∞
                                    logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ä–µ–ª–∏–∑ —Å –¥—Ä—É–≥–∏–º –≥–æ–¥–æ–º: {album['name']} ({release_date_str})")
                                    continue
                                # –î–ª—è —Ä–µ–ª–∏–∑–æ–≤ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–æ–ª—å–∫–æ –≥–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º 1 —è–Ω–≤–∞—Ä—è
                                release_date = datetime(year, 1, 1)
                            elif len(release_date_str) == 7:  # –ì–æ–¥ –∏ –º–µ—Å—è—Ü (YYYY-MM)
                                year, month = map(int, release_date_str.split('-'))
                                if year < current_time.year - 1:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–ª–∏–∑—ã —Å—Ç–∞—Ä—à–µ –ø—Ä–æ—à–ª–æ–≥–æ –≥–æ–¥–∞
                                    logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ä–µ–ª–∏–∑ —Å –¥—Ä—É–≥–∏–º –≥–æ–¥–æ–º: {album['name']} ({release_date_str})")
                                    continue
                                # –î–ª—è —Ä–µ–ª–∏–∑–æ–≤ —Å –≥–æ–¥–æ–º –∏ –º–µ—Å—è—Ü–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
                                release_date = datetime(year, month, 1)
                            elif len(release_date_str) == 10:  # –ü–æ–ª–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)
                                release_date = datetime.strptime(release_date_str, '%Y-%m-%d')
                                # –î–ª—è –ø–æ–ª–Ω—ã—Ö –¥–∞—Ç –Ω–µ –¥–µ–ª–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –≥–æ–¥—É
                            else:
                                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {release_date_str}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                                continue
                            
                            # –õ–æ–∫–∞–ª–∏–∑—É–µ–º –¥–∞—Ç—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                            release_date = moscow_tz.localize(release_date)
                            
                            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –¥–Ω—è—Ö –Ω–∞–ø—Ä—è–º—É—é
                            delta = current_time - release_date
                            days_difference = delta.days
                            
                            # –î–µ–±–∞–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–Ω–∏—Ü–µ
                            logger.debug(f"–ê–ª—å–±–æ–º {album['name']} –æ—Ç {artist_name} - –¥–∞—Ç–∞: {release_date_str}, —Ä–∞–∑–Ω–∏—Ü–∞: {days_difference} –¥–Ω–µ–π")
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ª–∏–∑—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
                            if 0 <= days_difference <= days_ago:
                                logger.info(f"–ù–∞–π–¥–µ–Ω —Ä–µ–ª–∏–∑ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–∞—Ç: {album['name']} –æ—Ç {artist_name}, {days_difference} –¥–Ω–µ–π –Ω–∞–∑–∞–¥")
                                
                                # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–∫–∏ –∏–∑ –∞–ª—å–±–æ–º–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
                                try:
                                    album_tracks = sp.album_tracks(album_id, limit=1)
                                    
                                    if album_tracks['items']:
                                        track = album_tracks['items'][0]
                                        
                                        release_info = {
                                            'artist': artist_name,
                                            'title': album['name'],
                                            'track_name': track['name'],
                                            'image_url': album['images'][0]['url'] if album['images'] else None,
                                            'spotify_link': album['external_urls']['spotify'],
                                            'spotify_id': album_id,
                                            'release_date': release_date,
                                            'days_old': days_difference,
                                            'query': f"{track['name']} - {artist_name}"
                                        }
                                        new_releases.append(release_info)
                                        logger.info(f"–ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π —Ä–µ–ª–∏–∑: {release_info['artist']} - {release_info['title']}, –¥–∞—Ç–∞: {release_date_str}")
                                except Exception as e:
                                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –∞–ª—å–±–æ–º–∞ {album_id}: {e}")
                            else:
                                if days_difference < 0:
                                    logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±—É–¥—É—â–∏–π —Ä–µ–ª–∏–∑ {artist_name} - {album['name']}: {release_date_str}")
                                else:
                                    logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ä–µ–ª–∏–∑ {artist_name} - {album['name']}: {release_date_str}, {days_difference} –¥–Ω–µ–π –Ω–∞–∑–∞–¥")
                        
                        except ValueError as date_error:
                            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã {release_date_str}: {date_error}")
                            continue
                        except Exception as parsing_error:
                            logger.warning(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–ª–∏–∑–∞ {album['name']}: {parsing_error}")
                            continue
                
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {artist_name}: {e}")
                    continue
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {e}")
            logger.error(traceback.format_exc())
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Ä–µ–ª–∏–∑—ã –≤ –æ—á–µ—Ä–µ–¥—å
        if new_releases:
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(new_releases)} –Ω–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤. –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å.")
            sorted_releases = sorted(new_releases, key=lambda x: x['release_date'], reverse=True)
            
            queue_start_time = datetime.now(moscow_tz) + timedelta(minutes=5)
            
            for idx, release in enumerate(sorted_releases):
                # –í –∫–∞—á–µ—Å—Ç–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å—Ç–∞ –±–µ—Ä–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è + –∏–Ω–¥–µ–∫—Å (—á–∞—Å—ã)
                post_time = queue_start_time + timedelta(hours=idx)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ ID –µ—â—ë –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –∏ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω
                if not is_release_posted(release['spotify_id']) and release['spotify_id'] not in queue_spotify_ids:
                    add_to_queue(
                        release['spotify_id'],
                        release['artist'],
                        release['title'],
                        release['image_url'],
                        release['spotify_link'],
                        release['query'],
                        post_time.isoformat()
                    )
                    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å: {release['artist']} - {release['title']}, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞: {post_time.strftime('%H:%M, %d.%m')}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            queue_info = get_queue()
            notify_admin_about_queue(queue_info)
        else:
            logger.info("–ù–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_followed_artists_releases: {e}")
        logger.error(traceback.format_exc())

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª
def post_to_channel(release_from_queue):
    try:
        queue_id, spotify_id, artist, title, image_url, spotify_link, query, post_time = release_from_queue
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–ª—å–±–æ–º–µ
        try:
            album = sp.album(spotify_id)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–µ–ª–∏–∑–∞ (–∞–ª—å–±–æ–º –∏–ª–∏ —Å–∏–Ω–≥–ª)
            release_type = album.get('album_type', 'Unknown').capitalize()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Ä–µ–ª–∏–∑–∞
            release_date = album.get('release_date', 'Unknown date')
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤
            track_count = album.get('total_tracks', 0)
            
            # –ü–æ–ª—É—á–∞–µ–º –∂–∞–Ω—Ä—ã
            artist_genres = []
            for artist_item in album.get('artists', [])[:2]:  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –¥–≤–∞ –∞—Ä—Ç–∏—Å—Ç–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
                try:
                    artist_info = sp.artist(artist_item['id'])
                    artist_genres.extend(artist_info.get('genres', []))
                except Exception as genre_error:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∂–∞–Ω—Ä—ã –¥–ª—è –∞—Ä—Ç–∏—Å—Ç–∞ {artist_item['name']}: {genre_error}")
                    continue
            
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
            artist_genres = sorted(list(set(artist_genres)))
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∂–∞–Ω—Ä–æ–≤ —Å —Ö—ç—à—Ç–µ–≥–∞–º–∏
            genre_text = ""
            if artist_genres:
                genre_hashtags = [f"#{genre.replace(' ', '').replace('-', '')}" for genre in artist_genres[:3]]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 3 –∂–∞–Ω—Ä–æ–≤
                genre_text = f"Genre: {', '.join(genre_hashtags)}"
        except Exception as album_error:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–ª—å–±–æ–º–µ {spotify_id}: {album_error}")
            release_type = "Unknown"
            release_date = "Unknown date"
            track_count = 0
            genre_text = ""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ —Ñ–æ—Ä–º–∞—Ç—É
        message_text = f"<b>{artist}</b>\n"  # –ê—Ä—Ç–∏—Å—Ç (–∂–∏—Ä–Ω—ã–º)
        message_text += f"<b>{title}</b>\n"  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ (–∂–∏—Ä–Ω—ã–º)
        message_text += f"{release_date}, {release_type}, {track_count} tracks\n"  # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–ª–∏–∑–µ
        
        if genre_text:
            message_text += f"{genre_text}"  # –ñ–∞–Ω—Ä—ã —Å —Ö—ç—à—Ç–µ–≥–∞–º–∏
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è Spotify
        keyboard = types.InlineKeyboardMarkup()
        spotify_button = types.InlineKeyboardButton(
            text="Listen on Spotify",
            url=spotify_link
        )
        keyboard.add(spotify_button)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–ª–æ–∂–∫–æ–π –∞–ª—å–±–æ–º–∞
        if image_url:
            try:
                response = requests.get(image_url, timeout=10)
                if response.status_code == 200:
                    bot.send_photo(channel_id, photo=response.content, caption=message_text, reply_markup=keyboard, parse_mode='HTML')
                else:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–ª–æ–∂–∫—É
                    bot.send_message(channel_id, message_text, reply_markup=keyboard, parse_mode='HTML')
            except Exception as img_error:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±–ª–æ–∂–∫–∏: {img_error}")
                bot.send_message(channel_id, message_text, reply_markup=keyboard, parse_mode='HTML')
        else:
            bot.send_message(channel_id, message_text, reply_markup=keyboard, parse_mode='HTML')
        
        # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–ø–æ—â–µ–Ω–Ω—ã–π –∏ —É–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        mark_release_posted(spotify_id)
        remove_from_queue(queue_id)
        logger.debug(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ—Å—Ç–∏–ª–∏ —Ä–µ–ª–∏–∑: {artist} - {title}")
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞: {e}")
        logger.error(traceback.format_exc())

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ –æ—á–µ—Ä–µ–¥–∏
def notify_admin_about_queue(queue_items):
    if not queue_items:
        bot.send_message(admin_id, "–û—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç–æ–≤ –ø—É—Å—Ç–∞")
        return
    
    queue_text = "üìã <b>–û—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç–æ–≤:</b>\n\n"
    
    for item in queue_items:
        queue_id, spotify_id, artist, title, _, _, _, post_time = item
        post_datetime = datetime.fromisoformat(post_time)
        formatted_time = post_datetime.strftime('%H:%M, %d.%m')
        queue_text += f"{queue_id}. {artist} - {title}\nüìÖ {formatted_time}\n\n"
    
    queue_text += f"–í—Å–µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏: {len(queue_items)} –ø–æ—Å—Ç–æ–≤"
    bot.send_message(admin_id, queue_text)

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
def check_and_post_from_queue():
    try:
        current_time = datetime.now(pytz.timezone('Europe/Moscow'))
        queue_items = get_queue()
        
        for item in queue_items:
            post_time = datetime.fromisoformat(item[7])
            if post_time.tzinfo is None:
                post_time = pytz.timezone('Europe/Moscow').localize(post_time)
            
            if current_time >= post_time:
                post_to_channel(item)
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_and_post_from_queue: {e}")
        logger.error(traceback.format_exc())

# –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ - –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º
@bot.message_handler(commands=['start'])
def start_command(message):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    bot.send_message(message.chat.id, "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –í–∞—à ID: " + str(message.from_user.id))

# –ö–æ–º–∞–Ω–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏
@bot.message_handler(commands=['queue_manage'])
def manage_queue(message):
    logger.debug(f"–ö–æ–º–∞–Ω–¥–∞ /queue_manage –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    if message.from_user.id != admin_id:
        bot.send_message(message.chat.id, f"–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ. –í–∞—à ID: {message.from_user.id}, –∞ –Ω—É–∂–µ–Ω: {admin_id}")
        return
    
    queue_items = get_queue()
    if not queue_items:
        bot.send_message(admin_id, "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞")
        return
    
    markup = types.InlineKeyboardMarkup()
    
    for item in queue_items[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        queue_id, _, artist, title, _, _, _, _ = item
        button_text = f"{queue_id}. {artist[:15]}... - {title[:15]}..."
        callback_data = f"del_{queue_id}"
        markup.add(types.InlineKeyboardButton(text=button_text, callback_data=callback_data))
    
    markup.add(types.InlineKeyboardButton(text="‚ùå –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –æ—á–µ—Ä–µ–¥—å", callback_data="clear_all"))
    
    bot.send_message(admin_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def extended_callback_query(call):
    if call.from_user.id != admin_id:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
    if call.data.startswith("del_"):
        queue_id = int(call.data.replace("del_", ""))
        remove_from_queue(queue_id)
        bot.answer_callback_query(call.id, "–ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        queue_items = get_queue()
        if queue_items:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é
            try:
                bot.edit_message_text("–ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /manage –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.", 
                                     chat_id=call.message.chat.id, 
                                     message_id=call.message.message_id)
            except:
                pass
            notify_admin_about_queue(queue_items)
        else:
            bot.edit_message_text("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞", 
                                 chat_id=call.message.chat.id, 
                                 message_id=call.message.message_id)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ–π –æ—á–µ—Ä–µ–¥–∏
    elif call.data == "clear_all":
        clear_queue()
        bot.answer_callback_query(call.id, "–û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞")
        bot.edit_message_text("–û—á–µ—Ä–µ–¥—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞", 
                             chat_id=call.message.chat.id, 
                             message_id=call.message.message_id)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤–≤–µ—Ä—Ö
    elif call.data.startswith("up_"):
        queue_id = int(call.data.replace("up_", ""))
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å
        queue_items = get_queue()
        
        # –ò—â–µ–º –ø–æ–∑–∏—Ü–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥–∏
        item_position = None
        for i, item in enumerate(queue_items):
            if item[0] == queue_id:
                item_position = i
                break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º
        if item_position is not None and item_position > 0:
            # –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏ —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–µ–¥ –Ω–∏–º
            current_item = queue_items[item_position]
            prev_item = queue_items[item_position - 1]
            
            # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            conn = sqlite3.connect('bot_data.db', check_same_thread=False)
            c = conn.cursor()
            c.execute("UPDATE queue SET post_time = ? WHERE id = ?", (prev_item[7], current_item[0]))
            c.execute("UPDATE queue SET post_time = ? WHERE id = ?", (current_item[7], prev_item[0]))
            conn.commit()
            conn.close()
            
            bot.answer_callback_query(call.id, "–†–µ–ª–∏–∑ –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤–≤–µ—Ä—Ö –≤ –æ—á–µ—Ä–µ–¥–∏")
        else:
            bot.answer_callback_query(call.id, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å: —ç–ª–µ–º–µ–Ω—Ç —É–∂–µ –ø–µ—Ä–≤—ã–π –≤ –æ—á–µ—Ä–µ–¥–∏ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        bot.edit_message_text("–û—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /manage –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.", 
                             chat_id=call.message.chat.id, 
                             message_id=call.message.message_id)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤–Ω–∏–∑
    elif call.data.startswith("down_"):
        queue_id = int(call.data.replace("down_", ""))
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å
        queue_items = get_queue()
        
        # –ò—â–µ–º –ø–æ–∑–∏—Ü–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥–∏
        item_position = None
        for i, item in enumerate(queue_items):
            if item[0] == queue_id:
                item_position = i
                break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º
        if item_position is not None and item_position < len(queue_items) - 1:
            # –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏ —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ –Ω–µ–≥–æ
            current_item = queue_items[item_position]
            next_item = queue_items[item_position + 1]
            
            # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            conn = sqlite3.connect('bot_data.db', check_same_thread=False)
            c = conn.cursor()
            c.execute("UPDATE queue SET post_time = ? WHERE id = ?", (next_item[7], current_item[0]))
            c.execute("UPDATE queue SET post_time = ? WHERE id = ?", (current_item[7], next_item[0]))
            conn.commit()
            conn.close()
            
            bot.answer_callback_query(call.id, "–†–µ–ª–∏–∑ –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤–Ω–∏–∑ –≤ –æ—á–µ—Ä–µ–¥–∏")
        else:
            bot.answer_callback_query(call.id, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å: —ç–ª–µ–º–µ–Ω—Ç —É–∂–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        bot.edit_message_text("–û—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /manage –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.", 
                             chat_id=call.message.chat.id, 
                             message_id=call.message.message_id)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–ª–∏–∑–µ
    elif call.data.startswith("info_"):
        queue_id = int(call.data.replace("info_", ""))
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ª–∏–∑–µ
        conn = sqlite3.connect('bot_data.db', check_same_thread=False)
        c = conn.cursor()
        c.execute("SELECT * FROM queue WHERE id = ?", (queue_id,))
        item = c.fetchone()
        conn.close()
        
        if item:
            _, spotify_id, artist, title, image_url, spotify_link, _, post_time = item
            post_datetime = datetime.fromisoformat(post_time)
            formatted_time = post_datetime.strftime('%H:%M, %d.%m')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–ª–∏–∑–µ
            info_text = f"üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–ª–∏–∑–µ –≤ –æ—á–µ—Ä–µ–¥–∏:</b>\n\n"
            info_text += f"<b>ID:</b> {queue_id}\n"
            info_text += f"<b>–ê—Ä—Ç–∏—Å—Ç:</b> {artist}\n"
            info_text += f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n"
            info_text += f"<b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞:</b> {formatted_time}\n"
            info_text += f"<b>Spotify ID:</b> {spotify_id}\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", callback_data="back_to_manage"))
            markup.add(types.InlineKeyboardButton("üîÑ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data=f"publish_now_{queue_id}"))
            
            bot.edit_message_text(info_text, 
                                 chat_id=call.message.chat.id, 
                                 message_id=call.message.message_id,
                                 reply_markup=markup,
                                 parse_mode='HTML')
        else:
            bot.answer_callback_query(call.id, "–†–µ–ª–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏")
    
    # –í–æ–∑–≤—Ä–∞—Ç –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    elif call.data == "back_to_manage":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        extended_queue_manage(call.message)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        except:
            pass
    
    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–ª–∏–∑–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
    elif call.data.startswith("publish_now_"):
        queue_id = int(call.data.replace("publish_now_", ""))
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–ª–∏–∑–∞
        conn = sqlite3.connect('bot_data.db', check_same_thread=False)
        c = conn.cursor()
        c.execute("SELECT * FROM queue WHERE id = ?", (queue_id,))
        item = c.fetchone()
        conn.close()
        
        if item:
            bot.answer_callback_query(call.id, "–†–µ–ª–∏–∑ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ")
            bot.edit_message_text("–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–ª–∏–∑–∞...", 
                                 chat_id=call.message.chat.id, 
                                 message_id=call.message.message_id)
            
            # –ü—É–±–ª–∏–∫—É–µ–º —Ä–µ–ª–∏–∑
            try:
                post_to_channel(item)
                bot.edit_message_text("–†–µ–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!", 
                                     chat_id=call.message.chat.id, 
                                     message_id=call.message.message_id)
            except Exception as e:
                bot.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ–ª–∏–∑–∞: {str(e)}", 
                                     chat_id=call.message.chat.id, 
                                     message_id=call.message.message_id)
        else:
            bot.answer_callback_query(call.id, "–†–µ–ª–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    elif call.data.startswith("time_"):
        queue_id = int(call.data.replace("time_", ""))
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–ª–∏–∑–∞
        conn = sqlite3.connect('bot_data.db', check_same_thread=False)
        c = conn.cursor()
        c.execute("SELECT * FROM queue WHERE id = ?", (queue_id,))
        item = c.fetchone()
        conn.close()
        
        if item:
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
            bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
                                 "–ù–∞–ø—Ä–∏–º–µ—Ä: 01.05.2025 14:30", 
                                 chat_id=call.message.chat.id, 
                                 message_id=call.message.message_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ä–µ–ª–∏–∑–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
            bot.register_next_step_handler(call.message, process_new_time, queue_id)
        else:
            bot.answer_callback_query(call.id, "–†–µ–ª–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
def process_new_time(message, queue_id):
    try:
        # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        new_time = datetime.strptime(message.text, '%d.%m.%Y %H:%M')
        
        # –õ–æ–∫–∞–ª–∏–∑—É–µ–º –≤—Ä–µ–º—è
        moscow_tz = pytz.timezone('Europe/Moscow')
        new_time = moscow_tz.localize(new_time)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –ë–î
        conn = sqlite3.connect('bot_data.db', check_same_thread=False)
        c = conn.cursor()
        c.execute("UPDATE queue SET post_time = ? WHERE id = ?", (new_time.isoformat(), queue_id))
        conn.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ª–∏–∑–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        c.execute("SELECT artist, title FROM queue WHERE id = ?", (queue_id,))
        result = c.fetchone()
        conn.close()
        
        if result:
            artist, title = result
            bot.send_message(message.chat.id, f"–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ–ª–∏–∑–∞ '{artist} - {title}' –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_time.strftime('%d.%m.%Y %H:%M')}")
        else:
            bot.send_message(message.chat.id, "–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥—å
        queue_items = get_queue()
        notify_admin_about_queue(queue_items)
    
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {str(e)}")

# –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤
@bot.message_handler(commands=['check'])
def check_updates_command(message):
    logger.debug(f"–ö–æ–º–∞–Ω–¥–∞ /check –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    if message.from_user.id != admin_id:
        bot.send_message(message.chat.id, f"–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ. –í–∞—à ID: {message.from_user.id}, –∞ –Ω—É–∂–µ–Ω: {admin_id}")
        return
        
    check_message = bot.send_message(message.chat.id, "–ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—ã–µ —Ä–µ–ª–∏–∑—ã –æ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
    def check_and_update():
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            check_followed_artists_releases()
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥—å
            queue_items = get_queue()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if queue_items:
                bot.edit_message_text(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ {len(queue_items)} —Ä–µ–ª–∏–∑–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏.", 
                                      message.chat.id, check_message.message_id)
                notify_admin_about_queue(queue_items)
            else:
                bot.edit_message_text("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", 
                                     message.chat.id, check_message.message_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            bot.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–ª–∏–∑–æ–≤. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö.", 
                                 message.chat.id, check_message.message_id)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    check_thread = threading.Thread(target=check_and_update)
    check_thread.daemon = True
    check_thread.start()

# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑–∞ –æ—á–µ—Ä–µ–¥–∏
@bot.message_handler(commands=['queue'])
def show_queue(message):
    logger.debug(f"–ö–æ–º–∞–Ω–¥–∞ /queue –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    if message.from_user.id == admin_id:
        queue_items = get_queue()
        notify_admin_about_queue(queue_items)
    else:
        bot.send_message(message.chat.id, f"–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ. –í–∞—à ID: {message.from_user.id}, –∞ –Ω—É–∂–µ–Ω: {admin_id}")

# –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
@bot.message_handler(commands=['debug'])
def debug_command(message):
    logger.debug(f"–ö–æ–º–∞–Ω–¥–∞ /debug –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    if message.from_user.id != admin_id:
        bot.send_message(message.chat.id, f"–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ. –í–∞—à ID: {message.from_user.id}, –∞ –Ω—É–∂–µ–Ω: {admin_id}")
        return
        
    debug_text = "üìä <b>–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n\n"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Spotify API
    try:
        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        user = sp.current_user()
        followed = sp.current_user_followed_artists(limit=1)
        debug_text += f"‚úÖ –î–æ—Å—Ç—É–ø –∫ Spotify API: —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
        debug_text += f"‚úÖ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['display_name']} ({user['id']})\n"
        debug_text += f"‚úÖ –ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {followed['artists']['total']}\n\n"
    except Exception as e:
        debug_text += f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Spotify API: {str(e)}\n\n"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
    try:
        queue_items = get_queue()
        conn = sqlite3.connect('bot_data.db', check_same_thread=False)
        c = conn.cursor()
        c.execute("SELECT COUNT(*) FROM posted_releases")
        posted_count = c.fetchone()[0]
        conn.close()
        
        debug_text += f"‚úÖ –î–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
        debug_text += f"‚úÖ –ó–∞–ø–∏—Å–µ–π –≤ –æ—á–µ—Ä–µ–¥–∏: {len(queue_items)}\n"
        debug_text += f"‚úÖ –ó–∞–ø–∏—Å–µ–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–ª–∏–∑–æ–≤: {posted_count}\n\n"
    except Exception as e:
        debug_text += f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}\n\n"
    
    # –î–∞—Ç—ã –∏ –≤—Ä–µ–º—è
    moscow_tz = pytz.timezone('Europe/Moscow')
    current_time = datetime.now(moscow_tz)
    debug_text += f"‚è∞ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {current_time.strftime('%Y-%m-%d %H:%M:%S')}\n"
    debug_text += f"‚è∞ –ò—â–µ–º —Ä–µ–ª–∏–∑—ã —Å: {(current_time - timedelta(days=3)).strftime('%Y-%m-%d')}\n\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    debug_text += f"ü§ñ Telegram bot API: —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
    debug_text += f"üë§ –í–∞—à ID: {message.from_user.id}\n"
    debug_text += f"üì¢ Channel ID: {channel_id}\n"
    
    bot.send_message(message.chat.id, debug_text)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ Spotify –≤—Ä—É—á–Ω—É—é
@bot.message_handler(commands=['refresh_token'])
def refresh_token_command(message):
    logger.debug(f"–ö–æ–º–∞–Ω–¥–∞ /refresh_token –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    if message.from_user.id != admin_id:
        bot.send_message(message.chat.id, f"–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ. –í–∞—à ID: {message.from_user.id}, –∞ –Ω—É–∂–µ–Ω: {admin_id}")
        return
        
    try:
        global sp
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤—Ä—É—á–Ω—É—é
        token_info = sp_oauth.refresh_access_token(spotify_refresh_token)
        access_token = token_info['access_token']
        
        # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Spotify
        sp = spotipy.Spotify(auth=access_token)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç
        current_user = sp.current_user()
        
        bot.send_message(message.chat.id, 
                         f"‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
                         f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {current_user['display_name']} (ID: {current_user['id']})")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        logger.error(traceback.format_exc())

if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –û—á–∏—â–∞–µ–º webhook –µ—Å–ª–∏ –æ–Ω –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    try:
        bot.remove_webhook()
        logger.info("Webhook —É–¥–∞–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
    try:
        bot.delete_webhook()
        logger.info("Webhook —É–¥–∞–ª–µ–Ω (–º–µ—Ç–æ–¥ delete_webhook)")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –º–µ—Ç–æ–¥–æ–º: {e}")
    
    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
    def run_background_tasks():
        last_check_time = time.time()
        last_queue_check = time.time()
        last_token_refresh = time.time()
        
        while True:
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∂–¥—ã–π —á–∞—Å
                if time.time() - last_token_refresh > 60 * 60:
                    logger.info("–û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω Spotify...")
                    try:
                        token_info = sp_oauth.refresh_access_token(spotify_refresh_token)
                        global sp
                        sp = spotipy.Spotify(auth=token_info['access_token'])
                        logger.info("–¢–æ–∫–µ–Ω Spotify —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
                    last_token_refresh = time.time()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ä–µ–ª–∏–∑—ã –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞
                if time.time() - last_check_time > 3 * 60 * 60:
                    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤...")
                    check_followed_artists_releases()
                    last_check_time = time.time()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                if time.time() - last_queue_check > 60:
                    logger.debug("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–∏...")
                    check_and_post_from_queue()
                    last_queue_check = time.time()
                
                time.sleep(1)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á–∞—Ö: {e}")
                logger.error(traceback.format_exc())
                time.sleep(5)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    background_thread = threading.Thread(target=run_background_tasks, daemon=True)
    background_thread.start()
    
    # –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    logger.info("–ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–∏—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–ª–∏–∑–æ–≤...")
    
    # –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
    check_thread = threading.Thread(target=check_followed_artists_releases, daemon=True)
    check_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º polling
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è Telegram API
    while True:
        try:
            # –≠—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å polling —Å –Ω–æ–≤—ã–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
            bot.stop_polling()
            time.sleep(1)
            bot.polling(none_stop=True, interval=3, timeout=30)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ polling: {e}")
            logger.error(traceback.format_exc())
            time.sleep(10)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—É –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
