import logging
import time
import threading
import traceback
import os
import spotipy
import telebot
from spotipy.oauth2 import SpotifyOAuth

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
SPOTIFY_CLIENT_ID = os.environ.get('SPOTIFY_CLIENT_ID')
SPOTIFY_CLIENT_SECRET = os.environ.get('SPOTIFY_CLIENT_SECRET')
SPOTIFY_REDIRECT_URI = os.environ.get('SPOTIFY_REDIRECT_URI')
SPOTIFY_REFRESH_TOKEN = os.environ.get('SPOTIFY_REFRESH_TOKEN')
TELEGRAM_CHANNEL_ID = os.environ.get('TELEGRAM_CHANNEL_ID')
CHECK_INTERVAL_HOURS = int(os.environ.get('CHECK_INTERVAL_HOURS', 3))

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
if not TELEGRAM_BOT_TOKEN:
    logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Spotify –∫–ª–∏–µ–Ω—Ç–æ–º
class SpotifyManager:
    def __init__(self, oauth, refresh_token):
        self.oauth = oauth
        self.refresh_token = refresh_token
        self.client = None
        self.last_token_refresh = 0
        
    def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç Spotify"""
        try:
            token_info = self.oauth.refresh_access_token(self.refresh_token)
            self.client = spotipy.Spotify(auth=token_info['access_token'])
            self.last_token_refresh = time.time()
            logger.info("Spotify API –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Spotify API: {e}")
            return False
    
    def refresh_token_if_needed(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞"""
        try:
            token_info = self.oauth.refresh_access_token(self.refresh_token)
            self.client = spotipy.Spotify(auth=token_info['access_token'])
            self.last_token_refresh = time.time()
            logger.info("–¢–æ–∫–µ–Ω Spotify —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
            return False
    
    def get_client(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç Spotify, –æ–±–Ω–æ–≤–ª—è—è —Ç–æ–∫–µ–Ω –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        # –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º API
        # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —É –Ω–∞—Å –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω
        try:
            self.refresh_token_if_needed()
            return self.client
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Spotify –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            return self.client

# –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º Telegram 
class TelegramBotManager:
    def __init__(self, bot_token, spotify_manager):
        self.bot_token = bot_token
        self.spotify_manager = spotify_manager
        self.bot = None
        self.queue = []
        self.is_running = False
        self.lock = threading.Lock()  # –î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—á–µ—Ä–µ–¥–∏
        self.start_time = time.time()
    
    def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç–∞ Telegram"""
        try:
            self.bot = telebot.TeleBot(self.bot_token)
            logger.info(f"–ë–æ—Ç Telegram –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ç–æ–∫–µ–Ω–æ–º (–ø–µ—Ä–≤—ã–µ 5 —Å–∏–º–≤–æ–ª–æ–≤): {self.bot_token[:5]}***")
            self._setup_handlers()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ Telegram: {e}")
            return False
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        
        @self.bot.message_handler(commands=['start', 'help'])
        def send_welcome(message):
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –∏–ª–∏ /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            help_text = (
                "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤ –Ω–∞ Spotify.\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                "/check - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ —Ä–µ–ª–∏–∑—ã\n"
                "/checknow - —Ç–æ –∂–µ —Å–∞–º–æ–µ, —á—Ç–æ –∏ /check\n"
                "/queue - –ø–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n"
                "/queue_remove [–Ω–æ–º–µ—Ä] - —É–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏\n"
                "/queue_clear - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –æ—á–µ—Ä–µ–¥—å\n"
                "/status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n\n"
                "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ Spotify (–∞–ª—å–±–æ–º, —Ç—Ä–µ–∫ –∏–ª–∏ –∞—Ä—Ç–∏—Å—Ç–∞), –∏ —è –¥–æ–±–∞–≤–ª—é –µ—ë –≤ –æ—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π."
            )
            self.bot.reply_to(message, help_text)
        
        @self.bot.message_handler(commands=['check', 'checknow'])
        def force_check(message):
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /check –∏–ª–∏ /checknow –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            self.bot.reply_to(message, "–ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
            check_thread = threading.Thread(target=self.check_followed_artists_releases, daemon=True)
            check_thread.start()
        
        @self.bot.message_handler(commands=['queue'])
        def show_queue(message):
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /queue –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á—Ç–æ-—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏
            with self.lock:
                current_queue = self.queue.copy()
                
            if not current_queue:
                self.bot.reply_to(message, "–û—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø—É—Å—Ç–∞.")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–π –æ—á–µ—Ä–µ–¥—å—é
            queue_message = "üîÑ <b>–¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π:</b>\n\n"
            for i, item in enumerate(current_queue):
                try:
                    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ item - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–ª–∏–∑–µ
                    if isinstance(item, dict):
                        if item.get("type") == "release" and "artist" in item and "album" in item:
                            queue_message += f"{i+1}. üíø <b>{item['artist']}</b> - <b>{item['album']}</b>\n"
                        elif item.get("type") == "track" and "artist" in item and "track" in item:
                            queue_message += f"{i+1}. üéß <b>{item['artist']}</b> - <b>{item['track']}</b>\n"
                        elif item.get("type") == "artist" and "artist" in item:
                            queue_message += f"{i+1}. üë§ <b>{item['artist']}</b>\n"
                        else:
                            queue_message += f"{i+1}. üîó {item.get('url', '–°—Å—ã–ª–∫–∞')}\n"
                    else:
                        queue_message += f"{i+1}. {str(item)}\n"
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –æ—á–µ—Ä–µ–¥–∏: {e}")
                    queue_message += f"{i+1}. [–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è]\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –æ—á–µ—Ä–µ–¥—å—é
            queue_message += "\n–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: /queue_remove [–Ω–æ–º–µ—Ä]"
            
            self.bot.reply_to(message, queue_message, parse_mode="HTML")
        
        @self.bot.message_handler(commands=['queue_remove'])
        def remove_queue_item(message):
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /queue_remove –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            parts = message.text.split()
            if len(parts) < 2:
                self.bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n–ü—Ä–∏–º–µ—Ä: /queue_remove 1")
                return
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∏–Ω–¥–µ–∫—Å (—Å —É—á–µ—Ç–æ–º, —á—Ç–æ –Ω—É–º–µ—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1)
                item_number = int(parts[1])
                index = item_number - 1
                
                # –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                success, removed_item = self.remove_from_queue(index)
                
                if success:
                    self.bot.reply_to(message, f"‚úÖ –≠–ª–µ–º–µ–Ω—Ç #{item_number} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏.")
                else:
                    self.bot.reply_to(message, f"‚ùå –≠–ª–µ–º–µ–Ω—Ç #{item_number} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /queue –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.")
            except ValueError:
                self.bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {e}")
                self.bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏.")
        
        @self.bot.message_handler(commands=['queue_clear'])
        def clear_queue(message):
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /queue_clear –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            
            with self.lock:
                queue_size = len(self.queue)
                self.queue = []
            
            self.bot.reply_to(message, f"‚úÖ –û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {queue_size}")
        
        @self.bot.message_handler(commands=['status'])
        def bot_status(message):
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /status –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            uptime = time.time() - self.start_time
            hours, remainder = divmod(int(uptime), 3600)
            minutes, seconds = divmod(remainder, 60)
            
            status_message = f"‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç\n‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {hours}—á {minutes}–º {seconds}—Å"
            self.bot.reply_to(message, status_message)
        
        @self.bot.message_handler(func=lambda message: True)
        def echo_all(message):
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Å—ã–ª–∫—É Spotify
            if "spotify.com" in message.text.lower():
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É
                item, error = self.process_spotify_link(message.text.strip())
                
                if error:
                    self.bot.reply_to(message, f"‚ùå {error}")
                    return
                
                if item:
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
                    self.add_to_queue(item)
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if item["type"] == "release" and "artist" in item and "album" in item:
                        reply = f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å:\nüíø <b>{item['artist']}</b> - <b>{item['album']}</b>"
                    elif item["type"] == "track" and "artist" in item and "track" in item:
                        reply = f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å:\nüéß <b>{item['artist']}</b> - <b>{item['track']}</b>"
                    elif item["type"] == "artist" and "artist" in item:
                        reply = f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å:\nüë§ <b>{item['artist']}</b>"
                    else:
                        reply = f"‚úÖ –°—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π"
                    
                    self.bot.reply_to(message, reply, parse_mode="HTML")
                    return
            
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ Spotify –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
            self.bot.reply_to(message, "–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã –∏ —Å—Å—ã–ª–∫–∏ Spotify. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
    
    def add_to_queue(self, item):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ –æ—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
        with self.lock:
            self.queue.append(item)
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: {item}")
    
    def remove_from_queue(self, index):
        """–£–¥–∞–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É"""
        with self.lock:
            if 0 <= index < len(self.queue):
                item = self.queue.pop(index)
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {item}")
                return True, item
        return False, None
    
    def process_spotify_link(self, url):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É Spotify –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ª–∏–∑–µ"""
        try:
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ Spotify: {url}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—Å—ã–ª–∫–∞ Spotify
            if "spotify.com" not in url:
                return None, "–≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ Spotify"
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç Spotify —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –¥–µ–π—Å—Ç–≤—É—é—â–∏–º —Ç–æ–∫–µ–Ω–æ–º
            sp = self.spotify_manager.get_client()
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—Å—ã–ª–æ–∫ Spotify
            if "/album/" in url:
                # –°—Å—ã–ª–∫–∞ –Ω–∞ –∞–ª—å–±–æ–º
                album_id = url.split("/album/")[1].split("?")[0]
                
                # –ï—Å–ª–∏ Spotify API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                if sp is None:
                    return {
                        "type": "release",
                        "album_id": album_id,
                        "url": url,
                        "source": "manual"
                    }, None
                
                # –ï—Å–ª–∏ API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                try:
                    album_info = sp.album(album_id)
                    return {
                        "type": "release",
                        "artist": album_info["artists"][0]["name"],
                        "album": album_info["name"],
                        "album_id": album_id,
                        "url": url,
                        "release_date": album_info.get("release_date"),
                        "source": "manual"
                    }, None
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∞–ª—å–±–æ–º–µ –∏–∑ Spotify: {e}")
                    # –î–∞–∂–µ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ª–∏–∑ –≤ –æ—á–µ—Ä–µ–¥—å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                    return {
                        "type": "release",
                        "album_id": album_id,
                        "url": url,
                        "source": "manual"
                    }, None
            
            elif "/track/" in url:
                # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç—Ä–µ–∫
                track_id = url.split("/track/")[1].split("?")[0]
                
                # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±–µ–∑ API
                if sp is None:
                    return {
                        "type": "track",
                        "track_id": track_id,
                        "url": url,
                        "source": "manual"
                    }, None
                
                # –ï—Å–ª–∏ API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                try:
                    track_info = sp.track(track_id)
                    return {
                        "type": "track",
                        "artist": track_info["artists"][0]["name"],
                        "track": track_info["name"],
                        "album": track_info["album"]["name"],
                        "track_id": track_id,
                        "url": url,
                        "source": "manual"
                    }, None
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ –∏–∑ Spotify: {e}")
                    return {
                        "type": "track",
                        "track_id": track_id,
                        "url": url,
                        "source": "manual"
                    }, None
            
            elif "/artist/" in url:
                # –°—Å—ã–ª–∫–∞ –Ω–∞ –∞—Ä—Ç–∏—Å—Ç–∞
                artist_id = url.split("/artist/")[1].split("?")[0]
                
                # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±–µ–∑ API
                if sp is None:
                    return {
                        "type": "artist",
                        "artist_id": artist_id,
                        "url": url,
                        "source": "manual"
                    }, None
                
                # –ï—Å–ª–∏ API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                try:
                    artist_info = sp.artist(artist_id)
                    return {
                        "type": "artist",
                        "artist": artist_info["name"],
                        "artist_id": artist_id,
                        "url": url,
                        "source": "manual"
                    }, None
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∞—Ä—Ç–∏—Å—Ç–µ –∏–∑ Spotify: {e}")
                    return {
                        "type": "artist",
                        "artist_id": artist_id,
                        "url": url,
                        "source": "manual"
                    }, None
            
            else:
                # –î—Ä—É–≥–æ–π —Ç–∏–ø —Å—Å—ã–ª–∫–∏ Spotify
                return {
                    "type": "unknown",
                    "url": url,
                    "source": "manual"
                }, None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏ Spotify: {e}")
            return None, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏: {str(e)}"

    def check_followed_artists_releases(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ —Ä–µ–ª–∏–∑—ã –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤"""
        try:
            logger.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ä–µ–ª–∏–∑—ã –∞—Ä—Ç–∏—Å—Ç–æ–≤...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç Spotify —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –¥–µ–π—Å—Ç–≤—É—é—â–∏–º —Ç–æ–∫–µ–Ω–æ–º
            sp = self.spotify_manager.get_client()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø –∫ Spotify API
            if sp is None:
                logger.error("API Spotify –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ —Ä–µ–ª–∏–∑—ã.")
                return
                
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤
            logger.info("–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤...")
            try:
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–º–∞–∫—Å–∏–º—É–º 50)
                followed_artists = sp.current_user_followed_artists(limit=50)
                
                if not followed_artists or 'artists' not in followed_artists or 'items' not in followed_artists['artists']:
                    logger.info("–ù–µ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤ –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞")
                    return
                    
                artists = followed_artists['artists']['items']
                logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–∑ {len(artists)} –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ä–µ–ª–∏–∑—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞
                for artist in artists:
                    artist_id = artist['id']
                    artist_name = artist['name']
                    
                    logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ä–µ–ª–∏–∑—ã –¥–ª—è –∞—Ä—Ç–∏—Å—Ç–∞: {artist_name}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∞–ª—å–±–æ–º—ã –∞—Ä—Ç–∏—Å—Ç–∞
                    albums = sp.artist_albums(artist_id, album_type='album,single', limit=3)
                    
                    if not albums or 'items' not in albums:
                        logger.info(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–ª—å–±–æ–º–æ–≤ –¥–ª—è –∞—Ä—Ç–∏—Å—Ç–∞ {artist_name}")
                        continue
                        
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∞–ª—å–±–æ–º
                    for album in albums['items']:
                        album_id = album['id']
                        album_name = album['name']
                        album_type = album['album_type']
                        release_date = album['release_date']
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–ª–∏–∑ –Ω–æ–≤—ã–º (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
                        try:
                            release_date_obj = None
                            if len(release_date) == 10:  # –§–æ—Ä–º–∞—Ç YYYY-MM-DD
                                release_date_obj = time.strptime(release_date, "%Y-%m-%d")
                            elif len(release_date) == 7:  # –§–æ—Ä–º–∞—Ç YYYY-MM
                                release_date_obj = time.strptime(f"{release_date}-01", "%Y-%m-%d")
                            elif len(release_date) == 4:  # –§–æ—Ä–º–∞—Ç YYYY
                                release_date_obj = time.strptime(f"{release_date}-01-01", "%Y-%m-%d")
                            
                            if release_date_obj:
                                release_timestamp = time.mktime(release_date_obj)
                                current_timestamp = time.time()
                                days_since_release = (current_timestamp - release_timestamp) / (60 * 60 * 24)
                                
                                # –ï—Å–ª–∏ —Ä–µ–ª–∏–∑ –Ω–µ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥—å
                                if days_since_release <= 7:
                                    logger.info(f"–ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π —Ä–µ–ª–∏–∑: {artist_name} - {album_name} ({release_date})")
                                    
                                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–ª—å–±–æ–º–µ
                                    album_info = sp.album(album_id)
                                    
                                    # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ—á–µ—Ä–µ–¥–∏
                                    release_item = {
                                        "type": "release",
                                        "artist": artist_name,
                                        "album": album_name,
                                        "album_id": album_id,
                                        "release_date": release_date,
                                        "album_type": album_type,
                                        "total_tracks": album_info.get("total_tracks", 0),
                                        "url": album['external_urls']['spotify'],
                                        "source": "auto",
                                        "artist_id": artist_id
                                    }
                                    
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ä–µ–ª–∏–∑ –≤ –æ—á–µ—Ä–µ–¥–∏
                                    duplicate = False
                                    with self.lock:
                                        for item in self.queue:
                                            if isinstance(item, dict) and item.get("album_id") == album_id:
                                                duplicate = True
                                                break
                                    
                                    if not duplicate:
                                        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
                                        self.add_to_queue(release_item)
                                else:
                                    logger.debug(f"–†–µ–ª–∏–∑ {artist_name} - {album_name} —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–π ({days_since_release:.1f} –¥–Ω–µ–π)")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã —Ä–µ–ª–∏–∑–∞ –¥–ª—è {artist_name} - {album_name}: {e}")
                            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤: {e}")
                logger.error(traceback.format_exc())
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–ª–∏–∑–æ–≤: {e}")
            logger.error(traceback.format_exc())

    def check_and_post_from_queue(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—á–µ—Ä–µ–¥—å –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–∞–Ω–∞–ª"""
        try:
            with self.lock:
                if not self.queue:
                    # –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞
                    return
                
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                item = self.queue[0]
            
            logger.info(f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {item}")
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç Spotify —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –¥–µ–π—Å—Ç–≤—É—é—â–∏–º —Ç–æ–∫–µ–Ω–æ–º
                sp = self.spotify_manager.get_client()
                
                # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç—Ä–µ–±—É–µ–º—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
                if isinstance(item, dict):
                    if item.get("type") == "release":
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        artist = item.get("artist", "")
                        album = item.get("album", "")
                        release_date = item.get("release_date", "")
                        album_type = "–ê–ª—å–±–æ–º" # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        track_count = ""
                        genres = []
                        
                        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ Spotify API –∏ –µ—Å—Ç—å album_id, –ø–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        if sp and "album_id" in item:
                            try:
                                album_info = sp.album(item["album_id"])
                                if not artist and "artists" in album_info and album_info["artists"]:
                                    artist = album_info["artists"][0]["name"]
                                if not album and "name" in album_info:
                                    album = album_info["name"]
                                if not release_date and "release_date" in album_info:
                                    release_date = album_info["release_date"]
                                if "album_type" in album_info:
                                    album_type = "–°–∏–Ω–≥–ª" if album_info["album_type"] == "single" else "–ê–ª—å–±–æ–º"
                                if "total_tracks" in album_info:
                                    track_count = f", {album_info['total_tracks']} —Ç—Ä–µ–∫–æ–≤"
                                
                                # –ü–æ–ª—É—á–∞–µ–º –∂–∞–Ω—Ä—ã –∞—Ä—Ç–∏—Å—Ç–∞
                                if "artists" in album_info and album_info["artists"]:
                                    artist_id = album_info["artists"][0]["id"]
                                    artist_info = sp.artist(artist_id)
                                    if "genres" in artist_info and artist_info["genres"]:
                                        genres = ["#" + genre.replace(" ", "_") for genre in artist_info["genres"][:3]]
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ Spotify: {e}")
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏
                        message = f"<b>{artist}</b>\n<b>{album}</b>\n"
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É, —Ç–∏–ø –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å
                        details = []
                        if release_date:
                            details.append(release_date)
                        if album_type:
                            details.append(album_type)
                        if track_count:
                            details.append(track_count)
                        
                        if details:
                            message += f"{', '.join(details)}\n"
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∂–∞–Ω—Ä—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
                        if genres:
                            message += f"–ñ–∞–Ω—Ä—ã: {' '.join(genres)}\n"
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
                        message += f"\n{item['url']}"
                        
                    elif item.get("type") == "track" and "artist" in item and "track" in item:
                        # –§–æ—Ä–º–∞—Ç –¥–ª—è —Ç—Ä–µ–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ñ–æ—Ä–º–∞—Ç, —á—Ç–æ –∏ –¥–ª—è —Ä–µ–ª–∏–∑–∞
                        artist = item.get("artist", "")
                        track = item.get("track", "")
                        album = item.get("album", "")
                        
                        message = f"<b>{artist}</b>\n<b>{track}</b>\n"
                        if album:
                            message += f"–ò–∑ –∞–ª—å–±–æ–º–∞: {album}\n"
                        
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∂–∞–Ω—Ä—ã, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω Spotify API
                        genres = []
                        if sp and "artist_id" in item:
                            try:
                                artist_info = sp.artist(item["artist_id"])
                                if "genres" in artist_info and artist_info["genres"]:
                                    genres = ["#" + genre.replace(" ", "_") for genre in artist_info["genres"][:3]]
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∂–∞–Ω—Ä–æ–≤ –∞—Ä—Ç–∏—Å—Ç–∞ –∏–∑ Spotify: {e}")
                        
                        if genres:
                            message += f"–ñ–∞–Ω—Ä—ã: {' '.join(genres)}\n\n"
                        
                        message += f"{item['url']}"
                        
                    else:
                        # –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                        message = f"–ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ Spotify\n\n{item.get('url', '–°—Å—ã–ª–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}"
                else:
                    # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –æ—á–µ—Ä–µ–¥–∏ –Ω–µ —Å–ª–æ–≤–∞—Ä—å
                    message = str(item)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª —Å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                self.bot.send_message(TELEGRAM_CHANNEL_ID, message, parse_mode="HTML")
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª: {TELEGRAM_CHANNEL_ID}")
                
                # –ï—Å–ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, —É–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                self.remove_from_queue(0)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
                logger.error(traceback.format_exc())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—á–µ—Ä–µ–¥–∏: {e}")
            logger.error(traceback.format_exc())

    def start_polling(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        self.is_running = True
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
        
        try:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º webhook, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
            self.bot.remove_webhook()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            polling_thread = threading.Thread(target=self._polling_thread, daemon=True)
            polling_thread.start()
            
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            self.is_running = False
            return False
    
    def _polling_thread(self):
        """–ü–æ—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ polling"""
        while self.is_running:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π polling –±–µ–∑ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤
                self.bot.polling(none_stop=True, interval=3, timeout=30)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ polling: {e}")
                logger.error(traceback.format_exc())
                time.sleep(10)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
    
    def run_background_tasks(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏"""
        last_check_time = time.time()
        last_queue_check = time.time()
        last_token_refresh = time.time()
        
        while self.is_running:
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∂–¥—ã–π —á–∞—Å
                if time.time() - last_token_refresh > 60 * 60:
                    logger.info("–û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω Spotify...")
                    self.spotify_manager.refresh_token_if_needed()
                    last_token_refresh = time.time()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ä–µ–ª–∏–∑—ã –∫–∞–∂–¥—ã–µ N —á–∞—Å–æ–≤
                if time.time() - last_check_time > CHECK_INTERVAL_HOURS * 60 * 60:
                    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Ä–µ–ª–∏–∑–æ–≤ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {CHECK_INTERVAL_HOURS} —á)...")
                    self.check_followed_artists_releases()
                    last_check_time = time.time()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                if time.time() - last_queue_check > 60:
                    self.check_and_post_from_queue()
                    last_queue_check = time.time()
                
                time.sleep(1)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á–∞—Ö: {e}")
                logger.error(traceback.format_exc())
                time.sleep(5)
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞"""
        self.is_running = False
        self.bot.stop_polling()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Spotify OAuth
    sp_oauth = SpotifyOAuth(
        client_id=SPOTIFY_CLIENT_ID,
        client_secret=SPOTIFY_CLIENT_SECRET,
        redirect_uri=SPOTIFY_REDIRECT_URI
    )
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä Spotify
    spotify_manager = SpotifyManager(sp_oauth, SPOTIFY_REFRESH_TOKEN)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Spotify API
    spotify_manager.initialize()
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
    bot_manager = TelegramBotManager(TELEGRAM_BOT_TOKEN, spotify_manager)
    if not bot_manager.initialize():
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    background_thread = threading.Thread(target=bot_manager.run_background_tasks, daemon=True)
    background_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot_manager.start_polling()
    
    # –î–µ—Ä–∂–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã–º
    try:
        while True:
            time.sleep(60)
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...")
        bot_manager.stop()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(traceback.format_exc())
        bot_manager.stop()

if __name__ == "__main__":
    main()
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∂–∞–Ω—Ä–æ–≤ –∞—Ä—Ç–∏—Å—Ç–∞ –∏–∑ Spotify: {e}")
                        
                        if genres:
                            message += f"–ñ–∞–Ω—Ä—ã: {' '.join(genres)}\n"
                        
                        message += f"\n{item['url']}"
                        
                    elif item.get("type") == "artist" and "artist" in item:
                        # –§–æ—Ä–º–∞—Ç –¥–ª—è –∞—Ä—Ç–∏—Å—Ç–∞
                        artist = item.get("artist", "")
                        
                        message = f"<b>{artist}</b>\n\n"
                        
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∂–∞–Ω—Ä—ã, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω Spotify API
                        genres = []
                        if sp and "artist_id" in item:
                            try:
                                artist_info = sp.artist(item["artist_id"])
                                if "genres" in artist_info and artist_info["genres"]:
                                    genres = ["#" + genre.replace(" ", "_") for genre in artist_info["genres"][:3]]
